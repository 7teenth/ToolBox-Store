import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { supabase } from "@/lib/supabaseClient";
import { AdminLayout } from "@/components/admin/Layout";
import { AdminAuthWrapper } from "@/components/admin/AdminAuthWrapper";
import { ArrowUpTrayIcon, CheckIcon } from "@heroicons/react/24/outline";

const SUPABASE_BASE_URL =
  "https://tsofemmfvfmioiwcsayj.supabase.co/storage/v1/object/public/products";

// üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è slug
const generateSlug = (text: string) => {
  if (!text) return "";
  const map: Record<string, string> = {
    –∞: "a",
    –±: "b",
    –≤: "v",
    –≥: "g",
    “ë: "g",
    –¥: "d",
    –µ: "e",
    —î: "e",
    –∂: "zh",
    –∑: "z",
    –∏: "i",
    —ñ: "i",
    —ó: "i",
    –π: "i",
    –∫: "k",
    –ª: "l",
    –º: "m",
    –Ω: "n",
    –æ: "o",
    –ø: "p",
    —Ä: "r",
    —Å: "s",
    —Ç: "t",
    —É: "u",
    —Ñ: "f",
    —Ö: "h",
    —Ü: "ts",
    —á: "ch",
    —à: "sh",
    —â: "shch",
    —é: "yu",
    —è: "ya",
    —å: "",
    "'": "",
    " ": "-",
    "‚Äî": "-",
    ".": "",
    ",": "",
    ":": "",
    ";": "",
  };
  return text
    .toLowerCase()
    .split("")
    .map((ch) => map[ch] || ch)
    .join("")
    .replace(/[^a-z0-9-]/g, "")
    .replace(/-+/g, "-")
    .replace(/^-|-$/g, "");
};

const getImageUrl = (path?: string | null) => {
  if (!path) return null;
  if (path.startsWith("http")) return path;
  return `${SUPABASE_BASE_URL}/${path}`;
};

const ToolTypeForm = () => {
  const router = useRouter();
  const { id } = router.query;

  const [name, setName] = useState("");
  const [slug, setSlug] = useState("");
  const [categoryId, setCategoryId] = useState<string | null>(null);
  const [subcategoryId, setSubcategoryId] = useState<string | null>(null);
  const [categories, setCategories] = useState<{ id: string; name: string }[]>(
    []
  );
  const [subcategories, setSubcategories] = useState<
    { id: string; name: string }[]
  >([]);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —ñ –¥–∞–Ω–∏—Ö —Ç–∏–ø—É
  useEffect(() => {
    fetchCategories();
    if (id && id !== "new") fetchToolType();
  }, [id]);

  // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  useEffect(() => {
    if (categoryId) fetchSubcategories(categoryId);
    else {
      setSubcategories([]);
      setSubcategoryId(null);
    }
  }, [categoryId]);

  const fetchCategories = async () => {
    const { data } = await supabase.from("categories").select("id, name");
    setCategories(data || []);
  };

  const fetchSubcategories = async (catId: string) => {
    const { data } = await supabase
      .from("subcategories")
      .select("id, name")
      .eq("category_id", catId);
    setSubcategories(data || []);
  };

  const fetchToolType = async () => {
    const { data } = await supabase
      .from("tool_types")
      .select("*")
      .eq("id", id)
      .single();
    if (data) {
      setName(data.name);
      setSlug(data.slug);
      setCategoryId(data.category_id);
      setSubcategoryId(data.subcategory_id);
      setImageUrl(data.image_url);
      setPreviewUrl(getImageUrl(data.image_url));
    }
  };

  // –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const handleFileChange = (file: File | null) => {
    setImageFile(file);
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => setPreviewUrl(e.target?.result as string);
      reader.readAsDataURL(file);
    } else {
      setPreviewUrl(imageUrl ? getImageUrl(imageUrl) : null);
    }
  };

  // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø–∞–ø–∫—É assets/tool_types
  const uploadToolTypeImage = async (): Promise<string | null> => {
    if (!imageFile) return imageUrl;

    const cleanName = generateSlug(imageFile.name.replace(/\.[^/.]+$/, ""));
    const fileExt = imageFile.name.split(".").pop();

    // –í–∞–∂–ª–∏–≤–æ: –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å assets/tool_types
    const bucketPath = `assets/tool_types/${Date.now()}_${cleanName}.${fileExt}`;

    const { error } = await supabase.storage
      .from("products")
      .upload(bucketPath, imageFile, { upsert: true });

    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:", error.message);
      return null;
    }

    return bucketPath;
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ slug
  const checkSlugUnique = async (slugToCheck: string) => {
    const { data } = await supabase
      .from("tool_types")
      .select("id")
      .eq("slug", slugToCheck)
      .limit(1)
      .single();
    if (data && data.id !== id) return false;
    return true;
  };

  const saveToolType = async () => {
    if (!name.trim() || !slug.trim() || !categoryId || !subcategoryId) {
      alert("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!");
      return;
    }
    setLoading(true);

    const uploadedPath = imageFile ? await uploadToolTypeImage() : imageUrl;

    const slugUnique = await checkSlugUnique(slug);
    if (!slugUnique) {
      alert("Slug –≤–∂–µ —ñ—Å–Ω—É—î!");
      setLoading(false);
      return;
    }

    const payload = {
      name,
      slug,
      category_id: categoryId,
      subcategory_id: subcategoryId,
      image_url: uploadedPath,
    };

    try {
      if (id === "new") {
        await supabase.from("tool_types").insert(payload).select();
      } else {
        await supabase.from("tool_types").update(payload).eq("id", id).select();
      }
      router.push("/admin/tool_types");
    } catch (err) {
      console.error(err);
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ç–∏–ø—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É");
    } finally {
      setLoading(false);
    }
  };

  return (
    <AdminAuthWrapper>
      <AdminLayout>
        <div className="max-w-2xl mx-auto mt-10">
          <h1 className="text-3xl font-extrabold text-gray-800 mb-8 text-center">
            {id === "new" ? "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–∏–ø —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É" : "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∏–ø"}
          </h1>

          <div className="bg-white p-8 rounded-3xl shadow-2xl flex flex-col gap-6">
            {/* –ù–∞–∑–≤–∞ */}
            <div className="flex flex-col gap-2">
              <label className="font-semibold text-gray-700">–ù–∞–∑–≤–∞</label>
              <input
                type="text"
                value={name}
                onChange={(e) => {
                  setName(e.target.value);
                  setSlug(generateSlug(e.target.value));
                }}
                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –î—Ä–∏–ª—ñ"
                className="border border-gray-300 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
            </div>

            {/* Slug */}
            <div className="flex flex-col gap-2">
              <label className="font-semibold text-gray-700">Slug</label>
              <input
                type="text"
                value={slug}
                onChange={(e) => setSlug(e.target.value)}
                placeholder="auto-generated-slug"
                className="border border-gray-300 rounded-xl px-4 py-3 bg-gray-100 focus:outline-none"
              />
            </div>

            {/* –ö–∞—Ç–µ–≥–æ—Ä—ñ—è */}
            <div className="flex flex-col gap-2">
              <label className="font-semibold text-gray-700">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
              <select
                value={categoryId || ""}
                onChange={(e) => setCategoryId(e.target.value)}
                className="border border-gray-300 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400"
              >
                <option value="">–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</option>
                {categories.map((c) => (
                  <option key={c.id} value={c.id}>
                    {c.name}
                  </option>
                ))}
              </select>
            </div>

            {/* –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è */}
            {subcategories.length > 0 && (
              <div className="flex flex-col gap-2">
                <label className="font-semibold text-gray-700">
                  –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è
                </label>
                <select
                  value={subcategoryId || ""}
                  onChange={(e) => setSubcategoryId(e.target.value)}
                  className="border border-gray-300 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400"
                >
                  <option value="">–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é</option>
                  {subcategories.map((sc) => (
                    <option key={sc.id} value={sc.id}>
                      {sc.name}
                    </option>
                  ))}
                </select>
              </div>
            )}

            {/* –§–æ—Ç–æ */}
            <div className="flex flex-col gap-2">
              <label className="font-semibold text-gray-700">–§–æ—Ç–æ</label>
              <div className="flex items-center gap-4">
                <label className="cursor-pointer inline-flex items-center gap-2 px-5 py-3 bg-gray-100 rounded-xl border hover:bg-gray-200">
                  <ArrowUpTrayIcon className="h-5 w-5" />
                  –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
                  <input
                    type="file"
                    className="hidden"
                    onChange={(e) =>
                      handleFileChange(e.target.files?.[0] || null)
                    }
                  />
                </label>
                {previewUrl && (
                  <img
                    src={previewUrl}
                    alt="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥"
                    className="w-28 h-28 rounded-xl border object-cover"
                  />
                )}
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ */}
            <button
              onClick={saveToolType}
              disabled={loading}
              className={`w-full flex items-center justify-center gap-2 bg-green-600 text-white py-3 rounded-2xl font-semibold hover:bg-green-700 ${
                loading ? "opacity-50 cursor-not-allowed" : ""
              }`}
            >
              <CheckIcon className="h-5 w-5" />
              {loading
                ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..."
                : id === "new"
                ? "–î–æ–¥–∞—Ç–∏ —Ç–∏–ø"
                : "–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏"}
            </button>
          </div>
        </div>
      </AdminLayout>
    </AdminAuthWrapper>
  );
};

export default ToolTypeForm;
